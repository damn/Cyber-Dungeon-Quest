(ns mapgen.unused-rotate-flip-grid-code
  (:require [data.grid2d :as grid])
  (:use [mapgen.utils :only (wall-at?)])
  (:import data.grid2d.VectorGrid))

(comment

 ; [30 42]
 ; x flipped wrong
 (tiles-inside-rect [[32 42] 2 2])
 ; bottom left is first tile


 )

(defn- flipy [data]
  (map (comp vec reverse) data))

; TODO this VectorGrid code move to data.grid2d
(defn- rotate-grid-90-degrees [grid]
  (VectorGrid. (vec (apply map vector (.data ^VectorGrid grid)))))

(defn- rotate-grid-180-degrees [grid]
  (VectorGrid. (vec (flipy (.data ^VectorGrid grid)))))

(defn- rotate-grid-270-degrees [grid]
  (VectorGrid. (vec (reverse (apply map vector (.data ^VectorGrid grid))))))

(comment

 (use 'data.grid2d)

 ; TODO use as print-grid with coord system starting at
 ; bottom left and going top right
 (defn print-grid2 [grid & {print-cell :print-cell
                            :or {print-cell
                                 #(print (case % :wall "#" :ground "_" "?"))}}]
   (doseq [y (range (dec (height grid)) -1 -1)]
     (doseq [x (range (width grid))]
       (print-cell (grid [x y])))
     (println)))

 ; Eingang unten Mitte.
 (def start-room-tmx
   [[nil nil nil nil nil] ; x0
    [nil :ground :ground :ground nil] ; x1
    [:ground :ground :ground :ground nil] ; x2
    [nil :ground :ground :ground nil] ; x3
    [nil nil nil nil nil]]) ; x4

  (let [grid (VectorGrid. start-room-tmx)]
    (print-grid2 grid)
    (println "90:")
    (print-grid2 (rotate-grid-90-degrees grid))
    (println "180:")
    (print-grid2 (rotate-grid-180-degrees grid))
    (println "270:")
    (print-grid2 (rotate-grid-270-degrees grid))))
