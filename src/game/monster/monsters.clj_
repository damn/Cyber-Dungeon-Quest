
; This file is not loaded - but has a lot of mechanics

;  * healer
;  * slowdown projectile
;  * rand-spawn-monster of big boss
;  * boss ranged projectile homing movement


;; Healer

(def- heal-radius 6)

(defn- get-healable-monsters-around [healer]
  (remove #(= % healer)
          (get-destructible-bodies (:position @healer) heal-radius :monster)))

(defn- monsters-need-healing? [healer]
  (some #(lower-than-max? (:hp @%))
        (get-healable-monsters-around healer)))

(defn- choose-active-healer [entity skillmanager delta]
  (let [skills (:skills skillmanager)
        heal-spell (:healing skills)
        ranged-weapon (:ranged skills)]
    (if (and (update-counter! entity delta [:skillmanager :counter])
             (monsters-need-healing? entity)
             (zero? (rand-int 5)))
      :healing
      :ranged)))

(defn- heal-nearby-monsters
  "returns the healed monsters"
  [healer]
  (doall (remove nil?
                 (map #(when (lower-than-max? (:hp @%))
                         (set-hp-to-max %) %)
                      (get-healable-monsters-around healer)))))

(defmethod do-effect :heal-around [_ entity]
  (audio/play "bfxr_healmonsters.wav")
  (let [healed-monsters (heal-nearby-monsters entity)]
    (create-lines-render-effect entity healed-monsters 500)))

(defn healing-skill []
  {:skill-type :heal-around
   :action-time 500
   :cooldown (rand-int-between 2000 3000)})

; TODO also use cached-monsters-around ?
(defmonster healer {:hp 3 :armor 0 :size 0.9}
  {:speed 2
   :skills [(redball-projectile-skill-props)
            (healing-skill)]
   :skillmanager {:choose-skill choose-active-healer
                  ; heilen trotzdem alle auf 1mal da 1sek action-time?
                  :counter (make-counter 500)}}
  (default-death-trigger)
  (ranged-runaway-movement-comp (rand-int-between 1 3))
  (animation-component
    (folder-animation :folder (monsterresrc "healer/") :duration 1000 :looping true)))

;; Instant-Healer

(defctypefn :cache-nearby-monsters :db/update-entity!
  [entity delta]
  (if (update-counter! entity delta [:cache-nearby-monsters :counter])
    (assoc-in! entity
               [:cache-nearby-monsters :nearby-monsters]
               (doall (get-healable-monsters-around entity)))))

(defn cache-nearby-monsters-component []
  {:cache-nearby-monsters {:counter (make-counter 1000)}})

; TODO not checking if ray-blocked ---> can heal through walls like other healer
; navigation meshes would make ray-blocked much simpler if in the same polygon/area
(defn- healing-required-and-allowed? [entity healer]
  (and (exists? entity)
       (not (is-dead? @entity))
       (lower-than-max? (:hp @entity))
       (< (v/distance (:position @entity) (:position @healer))
          8)))


(defmethod check-usable :instantheal [skill entity]
  (when-let [cached (:nearby-monsters (:cache-nearby-monsters @entity))]
    (when-let [needs-heal (first (sort-by #(:current (:hp @%))
                                          (filter #(healing-required-and-allowed? % entity)
                                                  cached)))]
      (assoc-in! entity [:instantheal :needs-heal] needs-heal)
      true)))

(defmethod do-effect :instantheal [{needs-heal :needs-heal} healer]
  (audio/play "bfxr_instanthealer_heal.wav")
  (when (healing-required-and-allowed? needs-heal healer)
    (set-hp-to-max needs-heal)
    (create-line-render-effect (:position @healer)
                               (:position @needs-heal)
                               200
                               :color
                               color/green)))

(defn instantheal-skill []
  {:skill-type :instantheal
   :action-time 150
   :cooldown 1000})

; TODO mehr hervorheben anstatt drawLine vlt so ein "beam" strahl... gr�n mit weiss als kontrast (not in prototype stage -> do another time!)
; rotating to which monster is healed?
(defmonster instant-healer {:hp 2 :armor 20 :size 0.8} ; 20x20px
  {:speed 1
   :skills [(monster-melee-component :cooldown 500
                                     :action-time 100
                                     :hit-sound "slash.wav")
            (instantheal-skill)]
   :skillmanager {:choose-skill (fn [entity skillmanager delta]
                                  (:skill-type (rand-nth (vals (:skills skillmanager)))))}}
  (default-death-trigger)
  (creature-animation-component [20 2])
  (cache-nearby-monsters-component))

(defmethod do-effect :slowdown-ranged [skill entity]
  (let [speed 5
        rotation-speed 0.1
        starting-angle (v/get-angle-to-position
                        (:position @entity)
                        (:position @player-entity))]
    (fire-projectile
     :position (:position @entity)
     :side (:side @entity)
     :size 0.6
     :animation (folder-animation :folder "effects/slowdownprojectile/" :duration 700 :looping true)
     :speed speed
     :movement (create-homing-movement player-entity starting-angle rotation-speed)
     :hit-effects [(dmg-effect [5 6])
                   (slowdown-effect 1)]
     :maxtime 16000)))


#_(defn- rand-spawn-monster [monstertype position areahw areahh]
  (let [{:keys [half-w half-h]} (get-monster-properties monstertype)
        spawn-positions (remove #(blocked-location? % half-w half-h :ground) ; get-free-posis duplicate?
                                (map translate-to-tile-middle
                                     (touched-tiles {:position position ; TODO
                                                     :half-width  areahw
                                                     :half-height areahh})))]
    (when (seq spawn-positions)
      (let [target (rand-nth spawn-positions)]
        (wake-up (try-spawn target monstertype)) ; TODO try-spawn also checks if blocked °_°
        (monsterteleport-animation target)
        (create-line-render-effect position target 70 :color color/white)))))

#_(comment
  (let [mlist [:littlespider :xploding-drone :mine :skull-chainsaw :armored-skull :armored-skull2 :ranged :shield-turret :mage-skull :healer :nova-melee :slowdown-caster]]

  (ingame-loop-comp :randspawn
    {:counter (make-counter 10000)}
    (active [delta c _]
      (when (and (not= @current-map :town)
                 (update-counter! entity delta [:foo]))  ; ?
        (audio/play "bfxr_monstercast.wav")
        (rand-spawn-monster mlist
                            (:position @player-entity)
                            (/ (world/viewport-width) 2)
                            (/ (world/viewport-height) 2)
                            :nospawn (rand-int-between 1 9))
        (assoc-in! entity [(:ctype c) :counter :maxcnt] (rand-int-between 1000 20000)))))))

(defn- fire-boss-ranged-projectile [body speed starting-angle rotation-speed effects]
  (fire-projectile
    :position (:position @entity)
    :side (:side @entity)
    :size 0.6
    :animation (folder-animation :folder "effects/bossball/" :duration 700 :looping true)
    :speed speed
    :movement (create-homing-movement player-entity starting-angle rotation-speed)
    :hit-effects effects
    :maxtime 12000))

#_(app/on-create
 (def ^:private boss-explosion (folder-frames "effects/bossexplosion/")))

#_(defmonster first-boss {:hp 20 :armor 50 :dimensions [2 4]}
  #_(big-body-hit-effect [[12 -15] [-8 -15] [0 -23] [1 -6] [-9 -4] [-8 4] [8 8] [-8 15] [3 23] [-6 25]])
  ;(light-component :color (color 0.8 0.2 0.2) :intensity 1 :radius 12)
  #_(death-trigger (fn [body]
                   (audio/play "bfxr_bossdeath.wav")
                   (animation-entity
                     :animation (create-animation boss-explosion)
                     :position (:position @body))
                   (create-item-body (:position @body) "The Golden Banana")

                   ; no lvl after this => no need to spawn an item!
                   ; (create-rand-item (:position @body) :max-lvl (:rand-item-max-lvl (get-current-map-data)))

                   (runmap #(swap! % assoc :destroyed? true) (:projectiles (:boss-ranged @body)))))
  {:skill-type :monster-spawner
   :cooldown 2000
   :action-time 500
   :do-skill (fn [entity component]
               (audio/play "bfxr_monstercast.wav")
               (rand-spawn-monster :little-bot (:position @entity) 6 3))}
  {:skill-type :boss-ranged
   :cooldown 3200
   :action-time 3000
   :projectiles []
   :dmg [5 15]
   :do-skill (fn [entity ranged-comp]
               (audio/play "bfxr_monstercast.wav")
               (let [speed 3 ; ca. player move speed
                     rotation-speed 0.05
                     effects [(dmg-effect (:dmg ranged-comp)) (stun-collision-effect 75 300)]]
                 (update-in! entity [:boss-ranged :projectiles] concat
                             (doall
                              (map #(fire-boss-ranged-projectile entity speed % rotation-speed effects)
                                   [0 90 180 270])))))}
  {:speed 0.7
   :movement {:control-update (fn [body _ _]
                                (v/direction (:position @body) (:position @player-entity)))}} ; TODO this is homing with instant rotation?
  (animation-component ; TODO gleich folder-animation auchnoch reinpacken in single-animation-component?
    (folder-animation :folder (monsterresrc "boss/") :duration 300 :looping true)))
